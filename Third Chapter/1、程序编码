指令：linux> gcc -0g -o p p1.c p2.c 码执行过程：
1、C预处理器：扩展源代码，插入所有用#include命令指定的文件，并扩展所有用#define声明指定的宏
2、编译器：产生两个源文件的汇编代码，名字分别为：p1.s   p2.s
3、汇编器：将汇编代码转化为二进制目标代码文件：p1.o    p2.o

目标代码：是机器代码的一种形式，它包含所有指令的二进制表示，但是还没有填入全局值得地址

4、链接器：将两个目标代码文件与实现库函数（比如：printf）的代码合并，并产生最终的可执行代码文件p

可执行代码：是机器代码的第二种形式，也就是处理器执行的代码格式

一、机器级代码

（一）两种抽象
1、指令集体系结构（又称：指令集架构，Instruction Set Architecture  ISA）
ISA定义机器级程序的格式和行为，它定义了处理器的状态、指令格式、每条指令对状态的影响

2、虚拟地址

程序计数器：PC（X86-64中用%rip表示）给出下一条将要执行的指令在内存中的地址

整数寄存器文件：包含16个命名位置，分别存储64位的值，这些存储器可以存储地址或整形数据

条件码寄存器：保存最近执行的算术or逻辑指令的状态信息。用来控制数据流中的条件变化，比如：实现if、while语句

一组向量寄存器：存放浮点数、整数

虽然C语言有各种数据类型，但是机器只是代码简单的将内存看成一个很大的、按字节寻址的数组，

（二）程序内存
1、可执行机器代码
2、操作系统需要的信息
3、用于管理调用和返回的运行栈
4、用户分配的内存块（比如：malloc分配）

（三）代码指令
1、在命令行上使用：-S     可以看到汇编代码
linux> gcc -0g -c m.c

2、在命令行上使用：-c     GCC会编译并汇编这段代码，产生.o文件
linux> gcc -0g -S m.c
机器执行的程序只是一个字节序列，它是对一系列指令的编码

3、在命令行上使用：-d     反汇编指令
linux> gcc -0g -d m.o

（1）X86-64指令长度从1~15字节不等
（2）反汇编使用的指令命名规则和GCC生成的汇编代码略有不同

4、在命令行上使用：prog  可以生成包含：启动和终止程序的代码、用于和操作系统交互的代码
同样地，可以用-d反汇编

（四）格式的注解
以‘.’开头的都是指导  汇编器  和  链接器  工作的伪指令，通常可以忽略

1、ATT和Intel的汇编代码格式

ATT: AT&T ,是GCC、OBJDUMP等工具的默认汇编代码格式

Intel: Microsoft、Intel的文档采用的默认汇编代码格式



2、C程序与汇编代码相结合

（1）编写完整的函数，放进一个独立的汇编代码文件中

（2）使用GCC的内联汇编特性，用asm伪指令可以在C程序中包含简短的汇编代码


三、数据格式
Intel的术语 “字”：表示16位数据，一个字=2字节


C声明                 Intel数据类型                  汇编代码后缀                 大小（字节）
char                      字节                            b                         1
int                       双字                            l                         4
short                      字                             w                         2
long                      四字                            q                          8
char *(指针类型)           四字                            q                          8
float                     单精度                           s                         4
double                    双精度                           l                         8

ps:long double 类型的数据不能移植，不建议使用
GCC生成的汇编代码一般都有后缀，比如：movb(传送字节byte)、movw(传送字word)、movl（传送双字long word）、movq(传送四字)
浮点数使用的是一组完全不同的指令与寄存器，因此不用担心double与int的后缀相同问题

四、访问信息

CPU：包含一组16个存储64位值的通用目的寄存器，用于存放指针、整数数据，它们的名字以：%r 开头

%rax:64位    %eax:低32位      %ax:低16位      %al:低8位     返回值
%rbx:64位    %ebx:低32位      %bx:低16位      %bl:低8位     被调用者保存
%rcx:64位    %ecx:低32位      %cx:低16位      %cl:低8位     第4个参数
%rdx:64位    %edx:低32位      %dx:低16位      %dl:低8位     第3个参数

%rsi:64位    %esi:低32位      %si:低16位      %sil:低8位    第2个参数
%rdi:64位    %edi:低32位      %di:低16位      %dil:低8位    第1个参数

%rbp:64位    %ebp:低32位      %bp:低16位      %bpl:低8位    被调用者保存
%rsp:64位    %esp:低32位      %sp:低16位      %spl:低8位    栈指针     

%r8：64位    %r8d             %r8w            %r8b:低8位
......................................................
%r10、%r11：调用者保存
%r12~%r15：被调用者保存

注意：复制或生成：1字节、2字节、4字节、8字节的值时，可能只需要一部分
